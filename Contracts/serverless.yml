service: gencontract-service

frameworkVersion: '4'

provider:
  name: aws
  runtime: python3.11
  region: us-east-1
  environment:
    AWS_REGION: ${self:provider.region}
  iam:
    role:
      statements:
        # Bedrock permissions
        - Effect: Allow
          Action:
            - bedrock:InvokeModel
            - bedrock:InvokeModelWithResponseStream
          Resource: 
            - "arn:aws:bedrock:${self:provider.region}::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0"
        
        # S3 permissions
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
            - s3:CreateBucket
            - s3:HeadBucket
            - s3:ListBucket
          Resource: 
            - "arn:aws:s3:::gencontract-data/*"
            - "arn:aws:s3:::gencontract-data"
        
        # DynamoDB permissions
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:CreateTable
            - dynamodb:DescribeTable
            - dynamodb:ListTables
          Resource: 
            - "arn:aws:dynamodb:${self:provider.region}:*:table/ContractMetadata"
            - "arn:aws:dynamodb:${self:provider.region}:*:table"

functions:
  createContract:
    handler: lambda_function.lambda_handler
    events:
      - http:
          path: /contracts
          method: post
          cors: true
      - http:
          path: /contracts
          method: get
          cors: true
      - http:
          path: /contracts/{contract_id}
          method: get
          cors: true
      - http:
          path: /contracts/{contract_id}
          method: put
          cors: true
      - http:
          path: /contracts/{contract_id}
          method: delete
          cors: true
      - http:
          path: /generate
          method: post
          cors: true
    timeout: 30
    memorySize: 512
    environment:
      LOG_LEVEL: INFO

  healthCheck:
    handler: lambda_function.health_check
    events:
      - http:
          path: /health
          method: get
          cors: true
    timeout: 10
    memorySize: 256

resources:
  Resources:
    # S3 Bucket for storing contracts
    GenContractDataBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: gencontract-data
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        VersioningConfiguration:
          Status: Enabled
        LifecycleConfiguration:
          Rules:
            - Id: DeleteOldVersions
              Status: Enabled
              NoncurrentVersionExpiration:
                NoncurrentDays: 30

    # DynamoDB Table for contract metadata
    ContractMetadataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ContractMetadata
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: contract_id
            AttributeType: S
        KeySchema:
          - AttributeName: contract_id
            KeyType: HASH
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

plugins:
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 3000
    noPrependStageInUrl: true 