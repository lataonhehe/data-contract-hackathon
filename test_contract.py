#!/usr/bin/env python3
"""
Test script for the contract creation Lambda function
"""

import json
import sys
import os

# Add current directory to path for imports
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from lambda_function import lambda_handler, health_check


def test_contract_creation():
    """Test contract creation with valid input"""
    print("Testing contract creation...")
    
    # Test event for contract creation
    event = {
        "body": json.dumps({
            "user": "john.doe@example.com",
            "request": "Create a data contract for sharing customer information between a retail company and a marketing agency. The contract should include customer name, email, purchase history, and preferences. Ensure data is encrypted and only used for targeted marketing campaigns."
        }),
        "headers": {
            "Content-Type": "application/json"
        },
        "httpMethod": "POST",
        "path": "/contracts"
    }
    
    try:
        result = lambda_handler(event, None)
        print("‚úÖ Contract creation test passed")
        print(f"Status Code: {result['statusCode']}")
        
        if result['statusCode'] == 200:
            response_body = json.loads(result['body'])
            print(f"Contract ID: {response_body.get('contract_id')}")
            print(f"Status: {response_body.get('status')}")
            print(f"S3 Path: {response_body.get('s3_path')}")
            print(f"YAML Length: {len(response_body.get('yaml', ''))} characters")
        else:
            print(f"Response: {result['body']}")
        
        return True
    except Exception as e:
        print(f"‚ùå Contract creation test failed: {str(e)}")
        return False


def test_vietnamese_request():
    """Test contract creation with Vietnamese request"""
    print("\nTesting Vietnamese request...")
    
    event = {
        "body": json.dumps({
            "user": "nguyen.van.a@example.com",
            "request": "T·∫°o h·ª£p ƒë·ªìng chia s·∫ª d·ªØ li·ªáu cho vi·ªác chia s·∫ª th√¥ng tin kh√°ch h√†ng gi·ªØa c√¥ng ty b√°n l·∫ª v√† ƒë·∫°i l√Ω ti·∫øp th·ªã. H·ª£p ƒë·ªìng n√™n bao g·ªìm t√™n kh√°ch h√†ng, email, l·ªãch s·ª≠ mua h√†ng v√† s·ªü th√≠ch. ƒê·∫£m b·∫£o d·ªØ li·ªáu ƒë∆∞·ª£c m√£ h√≥a v√† ch·ªâ s·ª≠ d·ª•ng cho c√°c chi·∫øn d·ªãch ti·∫øp th·ªã c√≥ m·ª•c ti√™u."
        }),
        "headers": {
            "Content-Type": "application/json"
        },
        "httpMethod": "POST",
        "path": "/contracts"
    }
    
    try:
        result = lambda_handler(event, None)
        print("‚úÖ Vietnamese request test passed")
        print(f"Status Code: {result['statusCode']}")
        
        if result['statusCode'] == 200:
            response_body = json.loads(result['body'])
            print(f"Contract ID: {response_body.get('contract_id')}")
            print(f"YAML Length: {len(response_body.get('yaml', ''))} characters")
        
        return True
    except Exception as e:
        print(f"‚ùå Vietnamese request test failed: {str(e)}")
        return False


def test_missing_user():
    """Test validation for missing user"""
    print("\nTesting missing user validation...")
    
    event = {
        "body": json.dumps({
            "request": "Create a data contract for customer information sharing."
        }),
        "httpMethod": "POST",
        "path": "/contracts"
    }
    
    try:
        result = lambda_handler(event, None)
        if result['statusCode'] == 400:
            print("‚úÖ Missing user validation test passed")
            return True
        else:
            print(f"‚ùå Missing user validation test failed: {result['statusCode']}")
            return False
    except Exception as e:
        print(f"‚ùå Missing user validation test failed: {str(e)}")
        return False


def test_missing_request():
    """Test validation for missing request"""
    print("\nTesting missing request validation...")
    
    event = {
        "body": json.dumps({
            "user": "test@example.com"
        }),
        "httpMethod": "POST",
        "path": "/contracts"
    }
    
    try:
        result = lambda_handler(event, None)
        if result['statusCode'] == 400:
            print("‚úÖ Missing request validation test passed")
            return True
        else:
            print(f"‚ùå Missing request validation test failed: {result['statusCode']}")
            return False
    except Exception as e:
        print(f"‚ùå Missing request validation test failed: {str(e)}")
        return False


def test_invalid_email():
    """Test validation for invalid email"""
    print("\nTesting invalid email validation...")
    
    event = {
        "body": json.dumps({
            "user": "invalid-email",
            "request": "Create a data contract for customer information sharing."
        }),
        "httpMethod": "POST",
        "path": "/contracts"
    }
    
    try:
        result = lambda_handler(event, None)
        if result['statusCode'] == 400:
            print("‚úÖ Invalid email validation test passed")
            return True
        else:
            print(f"‚ùå Invalid email validation test failed: {result['statusCode']}")
            return False
    except Exception as e:
        print(f"‚ùå Invalid email validation test failed: {str(e)}")
        return False


def test_invalid_json():
    """Test validation for invalid JSON"""
    print("\nTesting invalid JSON validation...")
    
    event = {
        "body": "invalid json content",
        "httpMethod": "POST",
        "path": "/contracts"
    }
    
    try:
        result = lambda_handler(event, None)
        if result['statusCode'] == 400:
            print("‚úÖ Invalid JSON validation test passed")
            return True
        else:
            print(f"‚ùå Invalid JSON validation test failed: {result['statusCode']}")
            return False
    except Exception as e:
        print(f"‚ùå Invalid JSON validation test failed: {str(e)}")
        return False


def test_cors():
    """Test CORS headers"""
    print("\nTesting CORS headers...")
    
    event = {
        "httpMethod": "OPTIONS",
        "path": "/contracts"
    }
    
    try:
        result = lambda_handler(event, None)
        if result['statusCode'] == 200:
            print("‚úÖ CORS test passed")
            return True
        else:
            print(f"‚ùå CORS test failed: {result['statusCode']}")
            return False
    except Exception as e:
        print(f"‚ùå CORS test failed: {str(e)}")
        return False


def test_health_check():
    """Test health check endpoint"""
    print("\nTesting health check endpoint...")
    
    event = {
        "httpMethod": "GET",
        "path": "/health"
    }
    
    try:
        result = health_check(event, None)
        if result['statusCode'] == 200:
            print("‚úÖ Health check test passed")
            response_body = json.loads(result['body'])
            print(f"Status: {response_body.get('status')}")
            print(f"Service: {response_body.get('service')}")
            return True
        else:
            print(f"‚ùå Health check test failed: {result['statusCode']}")
            return False
    except Exception as e:
        print(f"‚ùå Health check test failed: {str(e)}")
        return False


def test_complex_request():
    """Test with a complex data sharing request"""
    print("\nTesting complex data sharing request...")
    
    event = {
        "body": json.dumps({
            "user": "data.analyst@healthcare.org",
            "request": """Create a comprehensive data contract for sharing patient health records between a hospital network and a medical research institute. The contract must include:
            - Patient demographics (age, gender, location)
            - Medical history and diagnoses
            - Treatment plans and medications
            - Lab results and vital signs
            - Insurance information
            - Emergency contact details
            
            Requirements:
            - All data must be encrypted in transit and at rest
            - Access limited to authorized researchers only
            - Data retention policy of 10 years
            - Audit trail for all data access
            - Compliance with HIPAA regulations
            - Anonymization of sensitive identifiers
            - Regular security assessments"""
        }),
        "headers": {
            "Content-Type": "application/json"
        },
        "httpMethod": "POST",
        "path": "/contracts"
    }
    
    try:
        result = lambda_handler(event, None)
        print("‚úÖ Complex request test passed")
        print(f"Status Code: {result['statusCode']}")
        
        if result['statusCode'] == 200:
            response_body = json.loads(result['body'])
            print(f"Contract ID: {response_body.get('contract_id')}")
            print(f"YAML Length: {len(response_body.get('yaml', ''))} characters")
        
        return True
    except Exception as e:
        print(f"‚ùå Complex request test failed: {str(e)}")
        return False


def main():
    """Run all tests"""
    print("üß™ Running contract creation tests\n")
    
    tests = [
        test_contract_creation,
        test_vietnamese_request,
        test_missing_user,
        test_missing_request,
        test_invalid_email,
        test_invalid_json,
        test_cors,
        test_health_check,
        test_complex_request
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
    
    print(f"\nüìä Test Results: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ All tests passed!")
        return 0
    else:
        print("‚ùå Some tests failed")
        return 1


if __name__ == "__main__":
    sys.exit(main()) 